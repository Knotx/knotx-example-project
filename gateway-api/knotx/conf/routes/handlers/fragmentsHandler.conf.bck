debugMode = true

tasks {
  payment-check {
    action = user
    onTransitions {
      _success {
        actions = [
          {
            action = creditCard
          }
          {
            action = paypal-cb
            onTransitions {
              _error {
                action = paypal-fallback
              }
            }
          }
          {
            action = payU
          }
        ]
        onTransitions {
          _success {
            action = payments
            onTransitions {
              _success {
                action = te-hbs
              }
            }
          }
        }
      }
    }
  }
}

actions {
  payments {
    factory = payments
  }
  user {
    factory = http
    config {
      endpointOptions {
        path = /user
        domain = webapi
        port = 8080
        allowedRequestHeaders = ["Content-Type"]
      }
    }
  }
  creditCard {
    factory = http
    config {
      endpointOptions {
        path = /creditcard/allowed
        domain = webapi
        port = 8080
        allowedRequestHeaders = ["Content-Type"]
      }
    }
  }
  paypal-cb {
    factory = cb
    config {
      circuitBreakerName = "paypal-task"
      circuitBreakerOptions {
        maxFailures = 3
        resetTimeout = 10000
        timeout = 200
      }
    }
    doAction = paypal
  }
  paypal {
    factory = http
    config {
      endpointOptions {
        path = /paypal/verify
        domain = webapi
        port = 8080
        allowedRequestHeaders = ["Content-Type"]
      }
    }
  }
  paypal-fallback {
    factory = inline-payload
    config {
      alias = paypal
      payload {
        _result {
          verified = true
          paymentUrl = "https://paypal-fallback.com/payment?id=1983247919hv9sa398f"
          label = "PayPal standard"
        }
      }
    }
  }
  payU {
    factory = http
    config {
      endpointOptions {
        path = /payu/active
        domain = webapi
        port = 8080
        allowedRequestHeaders = ["Content-Type"]
      }
    }
  }
  te-hbs {
    factory = knot
    config {
      address = knotx.knot.te.handlebars
      deliveryOptions {
        sendTimeout = 3000
      }
    }
  }
}

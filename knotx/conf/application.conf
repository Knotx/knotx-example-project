########### Modules to start ###########
# You need to specify a list of verticle to be started by Knot.x
# Each line should have a form of <alias>=<verticle-class-name>
# where alias is just a name that you can use later in order to define configuration for the module
# verticle-class-name is a fully qualified class name of the verticle
#
# If you want to test the configuration you can simply comment out or remove unnecessary modules
modules = [
  "server=io.knotx.server.KnotxServerVerticle"
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle"
  "splitter=io.knotx.splitter.FragmentSplitterVerticle"
  "assembler=io.knotx.assembler.FragmentAssemblerVerticle"
  "hbsKnot=io.knotx.knot.templating.HandlebarsKnotVerticle"
  "dataBridge=io.knotx.databridge.core.DataBridgeKnot"
  "dataSourceHttp=io.knotx.databridge.http.HttpDataSourceAdapter"
  # If you're using form submission uncomment here and configure includes/forms.conf
  #
  # "formsKnot=io.knotx.forms.core.FormsKnot"

  # And you can put here any custom modules/verticles with the configurations in below sections
]

########### Globals ###########
global {
  serverPort = 8092

  snippetOptions {
    # Knot.x snippet HTML tag name. Default is 'script'.
    # Change here if you want to use different tag name, e.g. 'knotx:snippet'
    tagName = script

    # This prefix will start every snippet parameter in the snippet tag.
    # You may set it to 'data-xxxx-' when snippet tag name is an HTML tag to keep HTML5 data naming
    # compliance, e.g. when you set it to 'data-knotx-', snippet params will look like:
    # <script data-knotx-knotx="someKnot, handlebars"
    #         data-knotx-someKnot-param-name="XYZ" >
    paramsPrefix = data-knotx-
  }

  repositories {
    httpRepo.address = knotx.core.repository.http
    # fileSystemRepo.address = knotx.core.repository.filesystem
  }

  hbs.address = knotx.knot.handlebars

  forms.address = knotx.knot.forms

  # Data Bridge globals
  bridge {
    address = knotx.knot.databridge
    dataSource {
      http.address = knotx.bridge.datasource.http
    }
  }
}

########### Modules configurations ###########
config.server {
  options.config {
    include required("includes/server.conf")
  }

  # The options object carries-on configuration called DeploymentOptions for a given verticle.
  # It allows you to control the verticle behaviour, such as how many instances, classpath isolation, workers, etc.
  # See available options http://vertx.io/docs/vertx-core/dataobjects.html#DeploymentOptions
  #
  # options {}
}

config.httpRepo {
  options.config {
    include required("includes/httpRepo.conf")
  }
}

config.splitter.options.config {
  # Event bus address on which splitter is listening on. Default is 'knotx.core.splitter'
  # address =

  # Knot.x snippet options. Configures e.g. HTML tag name (default is 'script') and snippet
  # params prefix (default is "data-knotx-")
  snippetOptions = ${global.snippetOptions} # Do not change
}

config.assembler.options.config {
  # Event bus address on which splitter is listening on. Default is 'knotx.core.assembler'
  # address =

  # Knot.x snippet options. Configures e.g. HTML tag name (default is 'script') and snippet
  # params prefix (default is "data-knotx-")
  snippetOptions = ${global.snippetOptions} # Do not change

  # Strategy how to assembly markup with snippets that were not processed by any Knot. Default is UNWRAP
  # Allowed values are: AS_IS, IGNORE, UNWRAP
  # unprocessedStrategy =
}

config.hbsKnot {
  options.config {
    include required("includes/hbsKnot.conf")
  }
}

config.formsKnot {
  options.config {
    include required("includes/forms.conf")
  }
}

config.dataBridge {
  options.config {
    include required("includes/dataBridge.conf")
  }
}

config.dataSourceHttp {
  options.config {
    include required("includes/dataSourceHttp.conf")
  }
}

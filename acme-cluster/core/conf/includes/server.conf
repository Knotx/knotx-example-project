# Knot.x server HTTP port
serverOptions.port = ${global.serverPort}

# List of HTTP response headers Knot.x can return to the client
allowedResponseHeaders = [
  Access-Control-Allow-Origin
  Allow
  Cache-Control
  Content-Disposition
  Content-Encoding
  Content-Language
  Content-Location
  Content-MD5
  Content-Range
  Content-Type
  Content-Length
  Content-Security-Policy
  Date
  Edge-Control
  ETag
  Expires
  Last-Modified
  Location
  Pragma
  Proxy-Authenticate
  Server
  Set-Cookie
  Status
  Surrogate-Control
  Vary
  Via
  X-Frame-Options
  X-XSS-Protection
  X-Content-Type-Options
  X-UA-Compatible
  X-Request-ID
  X-Server
]

# Statically defined HTTP response header returned to the client in every HTTP response
customResponseHeader {
  name = X-Server
  value = Knot.x-Example
}

# CSRF protection related global configuration
csrfConfig {
  # A CSRF cookie name. Default is XSRF-TOKEN
  # cookieName =

  # CSRF Cookie path. Default is /
  # cookiePath =

  # Expected CSRF header name. Default is X-XSRF-TOKEN
  #
  # headerName =

  # A secret used to initialize CSRF value generation.
  # If not set a randomly generated 20 character long value will be used
  #
  secret = Knot.x is awsome

  # THe CSRF token expiration time in milliseconds. Default is 30 minutes (1800000)
  #
  # timeout =
}

# Configuration of a default flow - aka Templating mode
defaultFlow {
  repositories = [
    {
      path = "/content/local/.*"
      address = ${global.address.fsRepo}
    }
    {
      path = "/content/.*"
      address = ${global.address.httpRepo}
    }
    {
      path = "/img/.*"
      address = ${global.address.httpRepo}
      doProcessing = false
    }
  ]
  routing.GET.items = [
    {
      path = "/content/.*"
      address = ${global.address.knot.action}
      onTransition.next {
        address = ${global.address.knot.service}
        onTransition.next.address = ${global.address.knot.hbs}
      }
    }
  ]
  routing.POST.items = [
    {
      path = "/content/.*"
      address = ${global.address.knot.action}
      onTransition.next {
        address = ${global.address.knot.service}
        onTransition.next.address = ${global.address.knot.hbs}
      }
    }
  ]
}

# Configuration of the custom flow - aka Gateway mode
customFlow {
  # If you want to use custom response provider, change the address in this property
  #
  # responseProvider = knotx.gateway.responseprovider

  # Routing for GET requests
  routing.GET.item = [
    {
      path = "/customFlow/.*"
      address = ${global.address.knot.gateway}
      onTransition.next.address = ${global.address.knot.exampleReqProcessor}
    }
  ]
  # Routing for PUT requests
  routing.PUT.items = [
    {
      path = "/customFlow/.*"
      address = ${global.address.knot.gateway}
      onTransition.next.address = ${global.address.knot.exampleReqProcessor}
    }
  ]

}

# Vert.x event bus delivery options used when communicating with other verticles
# see http://vertx.io/docs/vertx-core/dataobjects.html#DeliveryOptions for the details what can be configured
#
# deliveryOptions {}

# Configuraiton of the HTTP Server access log (templating and gatway modes shares the same access log)
accessLog {
  enabled = true # Enable/Disable access log

  # Whether to log after request arrives (true), or after sending response (false). Default is false
  # immediate =

  # Access log format. Default is DEFAULT
  # Available formats: DEFAULT, SHORT, TINY
  # format =
}

# Enable/Disable stack traces on the error pages. Disable it on production
displayExceptionDetails = true

# Limit of uploaded file size in bytes. Default is -1 (unlimited).
# fileUploadLimit =

# Folder where uploaded files will be stored. Default is file-uploads folder in current working directory.
# fileUploadDirectory =

####### Server backpressure section ########

# Enable/Disable request dropping feature (backpressure). Default is disabled
dropRequests = false

# If dropRequest is enabled, a dropped requests will got HTTP response with a status code defined here. Default is 429 (Too many requests)
# dropRequestResponseCode =

# Defines a backpressure capacity buffer used when dropRequests is enabled. Default is 1000 slots
# backpressureBufferCapacity =

# A strategy how the requests are dropped (if the backpressure buffer is full). Default is DROP_LATEST.
# Available values: ERROR (terminate a sequence), DROP_LATEST, DROP_OLDEST
# backpressureStrategy =

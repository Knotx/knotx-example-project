routingOperations = ${routingOperations} [
  {
    operationId = healthcheck-operation
    handlers = [
      {
        name = healthcheck
      }
    ]
  }

  # serves openapi.yaml file as a static resource to be consumed by swagger-ui app
  {
    operationId = openapi-operation
    handlers = [
      {
        name = static
        config.webroot = openapi.yaml
      }
    ]
  }

  # serves swagger-ui web app
  {
    operationId = swaggerui-operation
    handlers = [
      {
        name = static
        config.webroot = webroot/swagger/
      }
    ]
  }

  # -----------
  # mocked operations for demonstration purposes:

  {
    operationId = getavatar-operation
    handlers = [
      {
        name = static-json
        config.json = {
          avatarUrl = ${mocked.loggedUser.avatar}
        }
      }
    ]
  }

  {
    operationId = uploadavatar-operation
    handlers = [
      {
        name = static-status
        config.code = 200
      }
    ]
  }

  {
    operationId = userlist-operation
    handlers = [
      {
        name = static-json
        config.json = ${mocked.userList}
      }
    ]
  }

  {
    operationId = userinfo-operation
    handlers = [
      {
        name = static-json
        config.json = ${mocked.loggedUser}
      }
    ]
  }

  {
    operationId = deprecated-userinfo-operation
    handlers = [
      {
        name = static-json
        config.json = ${mocked.loggedUser}
      }
    ]
  }

  {
    operationId = admininfo-operation
    handlers = ${config.server.handlers.common.request} [
      {
        name = admin-info
      }
    ]
  }

  {
    operationId = sendmsg-operation
    handlers = [
      {
        name = static-status
        config.code = 200
      }
    ]
  }

  {
    operationId = invalid-user-operation
    handlers = [
      {
        name = static-json
        config.json = ${mocked.invalidUser}
      }
    ]
  }
]

# mocked data to be referenced in handlers' configurations
mocked = {
  loggedUser = {
    id = 1
    username = "UserNr1"
    email = "usernr1@test.test"
    avatar = "https://api.adorable.io/avatars/285/1"
  }
  userList = [
    ${mocked.loggedUser}
    {id = 2, username = "Lorem", email = "lorem@test.test", avatar = "https://api.adorable.io/avatars/285/2"}
    {id = 3, username = "Ipsum", email = "ipsum@test.test", avatar = "https://api.adorable.io/avatars/285/3"}
  ]
  invalidUser = {
    id = -1 # incorrect ID
    username = "InvalidUser"
    email = "wrong@test.test"
    avatar = "https://api.adorable.io/avatars/285/-1"
  }
}
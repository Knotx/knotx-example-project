# GraphQL Schema
schema = "/books.graphqls"

# task factory (https://github.com/Knotx/knotx-fragments/tree/master/task/factory/default)
# that is able to create a task for the fragment is used
taskFactory {
  tasks {
    # fetch a list of books from Google Books API and expose their data to GraphQL fetcher
    get-books {
      action = getBooks
      onTransitions {
        _success {
          action = exposeInPayload-getBooks
        }
      }
    }

    # fetch a single book from Google Books API and expose its data to GraphQL fetcher
    get-book {
      action = getBook
      onTransitions {
        _success {
          action = exposeInPayload-getBook
        }
      }
    }
  }
  nodeFactories = [
    {
      factory = action
      # pre-configured actions, https://github.com/Knotx/knotx-fragments/tree/master/action
      config.actions = {
        # https://github.com/Knotx/knotx-fragments/tree/master/action/library#http-action
        getBooks {
          factory = http
          config {
            endpointOptions {
              # Google Books API with a list of books
              path = "/books/v1/volumes?q={config.gql.match}"
              domain = www.googleapis.com
              port = 443
              allowedRequestHeaders = ["Content-Type"]
            }
            webClientOptions {
              ssl = true
            }
          }
        }
        # custom implementation
        exposeInPayload-getBooks {
          factory = expose-payload-data
          config {
            key = getBooks
            exposeAs = fetchedData
          }
        }

        # https://github.com/Knotx/knotx-fragments/tree/master/action/library#http-action
        getBook {
          factory = http
          config {
            endpointOptions {
              # Google Books API with a single book
              path = "/books/v1/volumes/{config.gql.id}"
              domain = www.googleapis.com
              port = 443
              allowedRequestHeaders = ["Content-Type"]
            }
            webClientOptions {
              ssl = true
            }
          }
        }
        # custom implementation
        exposeInPayload-getBook {
          factory = expose-payload-data
          config {
            key = getBook
            exposeAs = fetchedData
          }
        }
      }
    }
  ]
}




# Open API specification url, see https://vertx.io/docs/kdoc/vertx/io.vertx.rxjava.ext.web.api.contract.openapi3/-open-a-p-i3-router-factory/rx-create.html
routing.specification = /conf/openapi.yaml

routing.commonHandlers {
  request = [
    {
      name = cookieHandler
    },
    #        {
    #          # CSRF protection related global configuration
    #          name = csrfHandler
    #          config {
    #            # A CSRF cookie name. Default is XSRF-TOKEN
    #            # cookieName =
    #
    #            # CSRF Cookie path. Default is /
    #            # cookiePath =
    #
    #            # Expected CSRF header name. Default is X-XSRF-TOKEN
    #            #
    #            # headerName =
    #
    #            # A secret used to initialize CSRF value generation.
    #            # If not set a randomly generated 20 character long value will be used
    #            #
    #            secret = Knot.x is awsome
    #
    #            # THe CSRF token expiration time in milliseconds. Default is 30 minutes (1800000)
    #            #
    #            # timeout =
    #          }
    #        },
    {
      name = bodyHandler
    },
    {
      name = knotContextHandler
    }
  ],
  response = [
    {
      # Statically defined HTTP response header returned to the client in every HTTP response
      name = headerHandler
      config.name = X-Server
      config.value = Knot.x-Example
    },
    {
      name = writerHandler
      # List of HTTP response headers Knot.x can return to the client
      config.allowedResponseHeaders = [
        Access-Control-Allow-Origin
        Allow
        Cache-Control
        Content-Disposition
        Content-Encoding
        Content-Language
        Content-Location
        Content-MD5
        Content-Range
        Content-Type
        Content-Length
        Content-Security-Policy
        Date
        Edge-Control
        ETag
        Expires
        Last-Modified
        Location
        Pragma
        Proxy-Authenticate
        Server
        Set-Cookie
        Status
        Surrogate-Control
        Vary
        Via
        X-Frame-Options
        X-XSRF-TOKEN
        X-XSS-Protection
        X-Content-Type-Options
        X-UA-Compatible
        X-Request-ID
        X-Server
      ]
    }
  ]
}

routing.operations = [
  {
    operationId = te-local-get
    handlers = ${routing.commonHandlers.request} [
      {
        name = repositoryHandler
        config.proxyAddress = ${global.repositories.fileSystemRepo.address}
      },
      {
        name = splitterHandler
        config.proxyAddress = ${global.splitter.address}
      },
      {
        name = knotEngineHandler
        config.routing = {
          proxyAddress = ${global.forms.address},
          onTransition.next {
            address = ${global.bridge.address},
            onTransition.next {
              address = ${global.hbs.address}
            }
          }
        }
      },
      {
        name = assemblerHandler
        config.proxyAddress = ${global.assembler.address}
      }
    ] ${routing.commonHandlers.response}
  },
  {
    operationId = te-local-post
    handlers = ${routing.commonHandlers.request} [
      {
        name = repositoryHandler
        config.proxyAddress = ${global.repositories.fileSystemRepo.address}
      },
      {
        name = splitterHandler
        config.proxyAddress = ${global.splitter.address}
      },
      {
        name = knotEngineHandler
        config.routing = {
          proxyAddress = ${global.forms.address},
          onTransition.next {
            address = ${global.bridge.address},
            onTransition.next {
              address = ${global.hbs.address}
            }
          }
        }
      },
      {
        name = assemblerHandler
        config.proxyAddress = ${global.assembler.address}
      }
    ] ${routing.commonHandlers.response}
  },
  ########### GATEWAY API ###########
  {
    operationId = acmeEndpoint
    handlers = [
      {
        name = acmeEndpointHandler
      }
    ]
  },
  {
    operationId = acmeSockJsEndpoint
    hadlers = [
      {
        name = acmeSockJsEndpointHandler
        config.feed = comments-feed
      }
    ]
  }
]
